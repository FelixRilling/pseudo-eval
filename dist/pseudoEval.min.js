var pseudoEval=function(n){"use strict";const t=/^(.+)(===|!==|>=|<=|>|<|&&|\|\|)(.+)$/,u=/^(.+)(\+|-|\*|\*\*|\/|%)(.+)$/,c=n=>({val:n,success:null!==n}),i=(n,t,u,i)=>{const o=n.match(u);const e=G(o[1],t);const s=G(o[3],t);if(e.success&&s.success&&i.has(o[2])){const n=i.get(o[2]);return c(n(e.val,s.val))}return c(null)},o=(n,t)=>typeof n===t,e=Object,s=Map,l=n=>o(n,"undefined"),f=n=>!l(n),a=(n,t)=>f(n[t]),r=n=>l(n)||null===n,E=e.entries,_=n=>new s(E(n)),v=_({"===":(n,t)=>n===t,"!==":(n,t)=>n!==t,"&&":(n,t)=>n&&t,"||":(n,t)=>n||t,">=":(n,t)=>n>=t,"<=":(n,t)=>n<=t,">":(n,t)=>n>t,"<":(n,t)=>n<t}),N=(n,u)=>i(n,u,t,v),R=_({"+":(n,t)=>n+t,"-":(n,t)=>n-t,"*":(n,t)=>n*t,"/":(n,t)=>n/t,"%":(n,t)=>n%t,"**":(n,t)=>n**t}),p=(n,t)=>i(n,t,u,R),S=/^["'`].*["'`]$/,I=n=>n.substr(1,n.length-2),L=(n,t,u=!1)=>{const c=t.split(/(?:\.|\[|\])+/g).map(n=>S.test(n)?I(n):n);let i=n;let o=null;let e=null;let s=0;for(;!r(i)&&s<c.length;){if(e=c[s],!a(i,e))return null;o=i,i=i[e],s++}return u?{index:s,key:e,val:i,container:o}:i},g=(n,t={},u=!1)=>c(L(t,n,u)),h=_({false:!1,true:!0,null:null}),m=(n,t)=>c(isNaN(Number(n))?S.test(n)?I(n):h.has(n)?h.get(n):g(n,t).val:Number(n)),G=(n,c)=>{const i=n.startsWith("!");const o=i?n.substr(1):n;let e;e=t.test(o)?N(o,c):u.test(o)?p(o,c):m(o,c);i&&(e.val=!e.val);return e};return n.evalExpression=G,n.evalLiteral=m,n.evalVariable=g,n.evalComparison=N,n.evalMath=p,n.getPathFull=L,n.getStringLiteral=I,n.mapComparison=v,n.mapMath=R,n.mapLiteral=h,n.REGEX_EXPRESSION_COMPARISON=t,n.REGEX_EXPRESSION_MATH=u,n.REGEX_GET_FUNCTION_CALL_ARGS=/(.+)\s?\((.*)\)/,n.REGEX_IS_FUNCTION_CALL=/^.+\(.*\)$/,n.REGEX_IS_STRING_LITERAL=S,n.REGEX_PATH_SPLIT=/(?:\.|\[|\])+/g,n}({});
//# sourceMappingURL=pseudoEval.min.js.map
